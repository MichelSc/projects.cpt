/**
 */
package com.misc.projects.CptDatasetLoad.provider;

import com.misc.projects.CptDatasetLoad.util.CptDatasetLoadAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CptDatasetLoadItemProviderAdapterFactory extends CptDatasetLoadAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CptDatasetLoadItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPDItemProvider fpdItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPDAdapter() {
		if (fpdItemProvider == null) {
			fpdItemProvider = new FPDItemProvider(this);
		}

		return fpdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPDSortingPlansSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPDSortingPlansSetItemProvider fpdSortingPlansSetItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPDSortingPlansSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPDSortingPlansSetAdapter() {
		if (fpdSortingPlansSetItemProvider == null) {
			fpdSortingPlansSetItemProvider = new FPDSortingPlansSetItemProvider(this);
		}

		return fpdSortingPlansSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.SortingPlansTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortingPlansTableItemProvider sortingPlansTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.SortingPlansTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortingPlansTableAdapter() {
		if (sortingPlansTableItemProvider == null) {
			sortingPlansTableItemProvider = new SortingPlansTableItemProvider(this);
		}

		return sortingPlansTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.SortingPlanInputTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortingPlanInputTableItemProvider sortingPlanInputTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.SortingPlanInputTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortingPlanInputTableAdapter() {
		if (sortingPlanInputTableItemProvider == null) {
			sortingPlanInputTableItemProvider = new SortingPlanInputTableItemProvider(this);
		}

		return sortingPlanInputTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.SortingPlanRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortingPlanRowItemProvider sortingPlanRowItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.SortingPlanRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortingPlanRowAdapter() {
		if (sortingPlanRowItemProvider == null) {
			sortingPlanRowItemProvider = new SortingPlanRowItemProvider(this);
		}

		return sortingPlanRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.SortingPlanOutputTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortingPlanOutputTableItemProvider sortingPlanOutputTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.SortingPlanOutputTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortingPlanOutputTableAdapter() {
		if (sortingPlanOutputTableItemProvider == null) {
			sortingPlanOutputTableItemProvider = new SortingPlanOutputTableItemProvider(this);
		}

		return sortingPlanOutputTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.SortingPlanOutputRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortingPlanOutputRowItemProvider sortingPlanOutputRowItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.SortingPlanOutputRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortingPlanOutputRowAdapter() {
		if (sortingPlanOutputRowItemProvider == null) {
			sortingPlanOutputRowItemProvider = new SortingPlanOutputRowItemProvider(this);
		}

		return sortingPlanOutputRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.SortingPlanInputRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortingPlanInputRowItemProvider sortingPlanInputRowItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.SortingPlanInputRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortingPlanInputRowAdapter() {
		if (sortingPlanInputRowItemProvider == null) {
			sortingPlanInputRowItemProvider = new SortingPlanInputRowItemProvider(this);
		}

		return sortingPlanInputRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPOItemProvider fpoItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPOAdapter() {
		if (fpoItemProvider == null) {
			fpoItemProvider = new FPOItemProvider(this);
		}

		return fpoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPOForecastUpload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPOForecastUploadItemProvider fpoForecastUploadItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPOForecastUpload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPOForecastUploadAdapter() {
		if (fpoForecastUploadItemProvider == null) {
			fpoForecastUploadItemProvider = new FPOForecastUploadItemProvider(this);
		}

		return fpoForecastUploadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPOForecastBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPOForecastBucketItemProvider fpoForecastBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPOForecastBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPOForecastBucketAdapter() {
		if (fpoForecastBucketItemProvider == null) {
			fpoForecastBucketItemProvider = new FPOForecastBucketItemProvider(this);
		}

		return fpoForecastBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPOForecastBuckets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPOForecastBucketsItemProvider fpoForecastBucketsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPOForecastBuckets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPOForecastBucketsAdapter() {
		if (fpoForecastBucketsItemProvider == null) {
			fpoForecastBucketsItemProvider = new FPOForecastBucketsItemProvider(this);
		}

		return fpoForecastBucketsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.SortingLevelsTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortingLevelsTableItemProvider sortingLevelsTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.SortingLevelsTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortingLevelsTableAdapter() {
		if (sortingLevelsTableItemProvider == null) {
			sortingLevelsTableItemProvider = new SortingLevelsTableItemProvider(this);
		}

		return sortingLevelsTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.SortingLevelRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortingLevelRowItemProvider sortingLevelRowItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.SortingLevelRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortingLevelRowAdapter() {
		if (sortingLevelRowItemProvider == null) {
			sortingLevelRowItemProvider = new SortingLevelRowItemProvider(this);
		}

		return sortingLevelRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPDSortingPlanTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPDSortingPlanTableItemProvider fpdSortingPlanTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPDSortingPlanTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPDSortingPlanTableAdapter() {
		if (fpdSortingPlanTableItemProvider == null) {
			fpdSortingPlanTableItemProvider = new FPDSortingPlanTableItemProvider(this);
		}

		return fpdSortingPlanTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPDSortingPanRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPDSortingPanRowItemProvider fpdSortingPanRowItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPDSortingPanRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPDSortingPanRowAdapter() {
		if (fpdSortingPanRowItemProvider == null) {
			fpdSortingPanRowItemProvider = new FPDSortingPanRowItemProvider(this);
		}

		return fpdSortingPanRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPDMasterData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPDMasterDataItemProvider fpdMasterDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPDMasterData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPDMasterDataAdapter() {
		if (fpdMasterDataItemProvider == null) {
			fpdMasterDataItemProvider = new FPDMasterDataItemProvider(this);
		}

		return fpdMasterDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.MasterDataTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MasterDataTableItemProvider masterDataTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.MasterDataTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMasterDataTableAdapter() {
		if (masterDataTableItemProvider == null) {
			masterDataTableItemProvider = new MasterDataTableItemProvider(this);
		}

		return masterDataTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.projects.CptDatasetLoad.FPDTableGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FPDTableGroupItemProvider fpdTableGroupItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.projects.CptDatasetLoad.FPDTableGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFPDTableGroupAdapter() {
		if (fpdTableGroupItemProvider == null) {
			fpdTableGroupItemProvider = new FPDTableGroupItemProvider(this);
		}

		return fpdTableGroupItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (fpdItemProvider != null) fpdItemProvider.dispose();
		if (fpdTableGroupItemProvider != null) fpdTableGroupItemProvider.dispose();
		if (fpdMasterDataItemProvider != null) fpdMasterDataItemProvider.dispose();
		if (fpdSortingPlansSetItemProvider != null) fpdSortingPlansSetItemProvider.dispose();
		if (fpdSortingPanRowItemProvider != null) fpdSortingPanRowItemProvider.dispose();
		if (fpdSortingPlanTableItemProvider != null) fpdSortingPlanTableItemProvider.dispose();
		if (masterDataTableItemProvider != null) masterDataTableItemProvider.dispose();
		if (sortingLevelsTableItemProvider != null) sortingLevelsTableItemProvider.dispose();
		if (sortingPlansTableItemProvider != null) sortingPlansTableItemProvider.dispose();
		if (sortingPlanInputTableItemProvider != null) sortingPlanInputTableItemProvider.dispose();
		if (sortingPlanOutputTableItemProvider != null) sortingPlanOutputTableItemProvider.dispose();
		if (sortingLevelRowItemProvider != null) sortingLevelRowItemProvider.dispose();
		if (sortingPlanRowItemProvider != null) sortingPlanRowItemProvider.dispose();
		if (sortingPlanOutputRowItemProvider != null) sortingPlanOutputRowItemProvider.dispose();
		if (sortingPlanInputRowItemProvider != null) sortingPlanInputRowItemProvider.dispose();
		if (fpoItemProvider != null) fpoItemProvider.dispose();
		if (fpoForecastUploadItemProvider != null) fpoForecastUploadItemProvider.dispose();
		if (fpoForecastBucketItemProvider != null) fpoForecastBucketItemProvider.dispose();
		if (fpoForecastBucketsItemProvider != null) fpoForecastBucketsItemProvider.dispose();
	}

}
